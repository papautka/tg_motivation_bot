package adapters

import (
	"fmt"
	"log/slog"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// TelegramAdapter - –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
type TelegramAdapter struct {
	bot *tgbotapi.BotAPI
}

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
var (
	// Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
	InlineKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru"),
			tgbotapi.NewInlineKeyboardButtonData("üá¨üáß English", "en"),
		),
	)

	// Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
	DefaultKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"),
			tgbotapi.NewKeyboardButton("üá¨üáß English"),
		),
	)
)

// NewTelegramAdapter —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramAdapter
func NewTelegramAdapter(token string) (*TelegramAdapter, error) {
	if token == "" {
		return nil, fmt.Errorf("telegram token cannot be empty")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create telegram bot: %w", err)
	}

	// –í–∫–ª—é—á–∞–µ–º debug —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
	bot.Debug = false

	slog.Info("Telegram bot initialized", slog.String("username", bot.Self.UserName))

	return &TelegramAdapter{
		bot: bot,
	}, nil
}

// StartBotLoop –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (t *TelegramAdapter) StartBotLoop(handler func(string, int64)) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := t.bot.GetUpdatesChan(u)

	slog.Info("Telegram bot started and listening for updates...")

	for update := range updates {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		if update.Message != nil {
			go t.handleMessage(update.Message, handler)
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
		if update.CallbackQuery != nil {
			go t.handleCallbackQuery(update.CallbackQuery, handler)
		}
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (t *TelegramAdapter) handleMessage(message *tgbotapi.Message, handler func(string, int64)) {
	chatID := message.Chat.ID
	text := message.Text

	slog.Info("Received message",
		slog.String("text", text),
		slog.Int64("chatId", chatID),
		slog.String("username", message.From.UserName),
	)

	// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	handler(text, chatID)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
func (t *TelegramAdapter) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery, handler func(string, int64)) {
	chatID := callbackQuery.Message.Chat.ID
	data := callbackQuery.Data

	slog.Info("Received callback query",
		slog.String("data", data),
		slog.Int64("chatId", chatID),
		slog.String("username", callbackQuery.From.UserName),
	)

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query (—É–±–∏—Ä–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏)
	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	if _, err := t.bot.Request(callback); err != nil {
		slog.Error("Failed to answer callback query", slog.String("error", err.Error()))
	}

	// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	handler(data, chatID)
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (t *TelegramAdapter) SendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	return t.sendMessage(msg)
}

// SendMessageWithReplyKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (t *TelegramAdapter) SendMessageWithReplyKeyboard(chatID int64, text string, keyboard *tgbotapi.ReplyKeyboardMarkup) error {
	msg := tgbotapi.NewMessage(chatID, text)
	if keyboard != nil {
		msg.ReplyMarkup = *keyboard
	}
	return t.sendMessage(msg)
}

// SendMessageWithInlineKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (t *TelegramAdapter) SendMessageWithInlineKeyboard(chatID int64, text string, keyboard *tgbotapi.InlineKeyboardMarkup) error {
	msg := tgbotapi.NewMessage(chatID, text)
	if keyboard != nil {
		msg.ReplyMarkup = *keyboard
	}
	return t.sendMessage(msg)
}

// SendMessageWithDefaultInlineKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (t *TelegramAdapter) SendMessageWithDefaultInlineKeyboard(chatID int64, text string) error {
	return t.SendMessageWithInlineKeyboard(chatID, text, &InlineKeyboard)
}

// SendPhoto –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ
func (t *TelegramAdapter) SendPhoto(chatID int64, photoPath string, caption string) error {
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(photoPath))
	photo.Caption = caption

	_, err := t.bot.Send(photo)
	if err != nil {
		slog.Error("Failed to send photo",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatID),
		)
		return fmt.Errorf("failed to send photo: %w", err)
	}

	slog.Info("Photo sent successfully", slog.Int64("chatId", chatID))
	return nil
}

// SendDocument –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
func (t *TelegramAdapter) SendDocument(chatID int64, documentPath string, caption string) error {
	document := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(documentPath))
	document.Caption = caption

	_, err := t.bot.Send(document)
	if err != nil {
		slog.Error("Failed to send document",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatID),
		)
		return fmt.Errorf("failed to send document: %w", err)
	}

	slog.Info("Document sent successfully", slog.Int64("chatId", chatID))
	return nil
}

// SendTypingAction –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
func (t *TelegramAdapter) SendTypingAction(chatID int64) error {
	action := tgbotapi.NewChatAction(chatID, tgbotapi.ChatTyping)
	_, err := t.bot.Request(action)
	if err != nil {
		slog.Error("Failed to send typing action",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatID),
		)
		return fmt.Errorf("failed to send typing action: %w", err)
	}
	return nil
}

// EditMessage —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (t *TelegramAdapter) EditMessage(chatID int64, messageID int, newText string) error {
	edit := tgbotapi.NewEditMessageText(chatID, messageID, newText)
	_, err := t.bot.Send(edit)
	if err != nil {
		slog.Error("Failed to edit message",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatID),
			slog.Int("messageId", messageID),
		)
		return fmt.Errorf("failed to edit message: %w", err)
	}

	slog.Info("Message edited successfully",
		slog.Int64("chatId", chatID),
		slog.Int("messageId", messageID),
	)
	return nil
}

// DeleteMessage —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (t *TelegramAdapter) DeleteMessage(chatID int64, messageID int) error {
	delete := tgbotapi.NewDeleteMessage(chatID, messageID)
	_, err := t.bot.Request(delete)
	if err != nil {
		slog.Error("Failed to delete message",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatID),
			slog.Int("messageId", messageID),
		)
		return fmt.Errorf("failed to delete message: %w", err)
	}

	slog.Info("Message deleted successfully",
		slog.Int64("chatId", chatID),
		slog.Int("messageId", messageID),
	)
	return nil
}

// GetMe –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
func (t *TelegramAdapter) GetMe() (*tgbotapi.User, error) {
	return &t.bot.Self, nil
}

// GetChatMember –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞
func (t *TelegramAdapter) GetChatMember(chatID int64, userID int64) (*tgbotapi.ChatMember, error) {
	member, err := t.bot.GetChatMember(tgbotapi.GetChatMemberConfig{
		ChatConfigWithUser: tgbotapi.ChatConfigWithUser{
			ChatID: chatID,
			UserID: userID,
		},
	})
	if err != nil {
		return nil, fmt.Errorf("failed to get chat member: %w", err)
	}
	return &member, nil
}

// SetCommands —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (t *TelegramAdapter) SetCommands(commands []tgbotapi.BotCommand) error {
	config := tgbotapi.NewSetMyCommands(commands...)
	_, err := t.bot.Request(config)
	if err != nil {
		slog.Error("Failed to set bot commands", slog.String("error", err.Error()))
		return fmt.Errorf("failed to set bot commands: %w", err)
	}

	slog.Info("Bot commands set successfully", slog.Int("count", len(commands)))
	return nil
}

// sendMessage - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å retry –ª–æ–≥–∏–∫–æ–π
func (t *TelegramAdapter) sendMessage(msg tgbotapi.MessageConfig) error {
	const maxRetries = 3
	const retryDelay = time.Second

	var err error
	for i := 0; i < maxRetries; i++ {
		_, err = t.bot.Send(msg)
		if err == nil {
			slog.Info("Message sent successfully",
				slog.Int64("chatId", msg.ChatID),
				slog.String("text", truncateString(msg.Text, 50)),
			)
			return nil
		}

		slog.Warn("Failed to send message, retrying...",
			slog.String("error", err.Error()),
			slog.Int("attempt", i+1),
			slog.Int64("chatId", msg.ChatID),
		)

		if i < maxRetries-1 {
			time.Sleep(retryDelay * time.Duration(i+1))
		}
	}

	slog.Error("Failed to send message after all retries",
		slog.String("error", err.Error()),
		slog.Int64("chatId", msg.ChatID),
	)
	return fmt.Errorf("failed to send message after %d attempts: %w", maxRetries, err)
}

// truncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "..."
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

// IsPrivateChat –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
func (t *TelegramAdapter) IsPrivateChat(chatID int64) bool {
	return chatID > 0
}

// IsGroupChat –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º
func (t *TelegramAdapter) IsGroupChat(chatID int64) bool {
	return chatID < 0
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è graceful shutdown)
func (t *TelegramAdapter) Stop() {
	t.bot.StopReceivingUpdates()
	slog.Info("Telegram bot stopped")
}
