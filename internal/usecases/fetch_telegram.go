package usecases

import (
	"log/slog"
	"tg_motivation_bot/internal/interfaces"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// TelegramFetcher - use case –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
type TelegramFetcher struct {
	Provider interfaces.TelegramApi
}

// NewTelegramFetcher —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramFetcher
func NewTelegramFetcher(p interfaces.TelegramApi) *TelegramFetcher {
	return &TelegramFetcher{
		Provider: p,
	}
}

// StartBotLoop –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (t *TelegramFetcher) StartBotLoopFetcher(handler func(string, int64)) {
	updates := t.Provider.StartBotLoop
	updates(handler)
	slog.Info("Telegram bot started and listening for updates...")
}

// FetchTelegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func (t *TelegramFetcher) FetchTelegram(chatId int64, msg string, keyboard *tgbotapi.ReplyKeyboardMarkup) error {
	var err error

	if keyboard != nil {
		err = t.Provider.SendMessageWithReplyKeyboard(chatId, msg, keyboard)
	} else {
		err = t.Provider.SendMessage(chatId, msg)
	}

	if err != nil {
		slog.Error("Error sending telegram message",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
			slog.String("message", truncateForLog(msg, 100)),
		)
	} else {
		slog.Info("Telegram message sent successfully",
			slog.Int64("chatId", chatId),
			slog.String("message", truncateForLog(msg, 50)),
		)
	}

	return err
}

// SendSimpleMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (t *TelegramFetcher) SendSimpleMessage(chatId int64, msg string) error {
	err := t.Provider.SendMessage(chatId, msg)
	if err != nil {
		slog.Error("Error sending simple telegram message",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
		)
	}
	return err
}

// SendMessageWithInlineKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (t *TelegramFetcher) SendMessageWithInlineKeyboard(chatId int64, msg string, keyboard *tgbotapi.InlineKeyboardMarkup) error {
	err := t.Provider.SendMessageWithInlineKeyboard(chatId, msg, keyboard)
	if err != nil {
		slog.Error("Error sending telegram message with inline keyboard",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
		)
	}
	return err
}

// SendMessageWithDefaultKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (t *TelegramFetcher) SendMessageWithDefaultKeyboard(chatId int64, msg string) error {
	err := t.Provider.SendMessageWithDefaultInlineKeyboard(chatId, msg)
	if err != nil {
		slog.Error("Error sending telegram message with default keyboard",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
		)
	}
	return err
}

// SendTypingIndicator –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
func (t *TelegramFetcher) SendTypingIndicator(chatId int64) error {
	err := t.Provider.SendTypingAction(chatId)
	if err != nil {
		slog.Warn("Error sending typing indicator",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
		)
	}
	return err
}

// SendPhoto –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
func (t *TelegramFetcher) SendPhoto(chatId int64, photoPath, caption string) error {
	err := t.Provider.SendPhoto(chatId, photoPath, caption)
	if err != nil {
		slog.Error("Error sending photo",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
			slog.String("photoPath", photoPath),
		)
	}
	return err
}

// SendDocument –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
func (t *TelegramFetcher) SendDocument(chatId int64, documentPath, caption string) error {
	err := t.Provider.SendDocument(chatId, documentPath, caption)
	if err != nil {
		slog.Error("Error sending document",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
			slog.String("documentPath", documentPath),
		)
	}
	return err
}

// EditMessage —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (t *TelegramFetcher) EditMessage(chatId int64, messageId int, newText string) error {
	err := t.Provider.EditMessage(chatId, messageId, newText)
	if err != nil {
		slog.Error("Error editing message",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
			slog.Int("messageId", messageId),
		)
	}
	return err
}

// DeleteMessage —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (t *TelegramFetcher) DeleteMessage(chatId int64, messageId int) error {
	err := t.Provider.DeleteMessage(chatId, messageId)
	if err != nil {
		slog.Error("Error deleting message",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
			slog.Int("messageId", messageId),
		)
	}
	return err
}

// GetBotInfo –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
func (t *TelegramFetcher) GetBotInfo() (*tgbotapi.User, error) {
	botInfo, err := t.Provider.GetMe()
	if err != nil {
		slog.Error("Error getting bot info", slog.String("error", err.Error()))
		return nil, err
	}

	slog.Info("Bot info retrieved",
		slog.String("username", botInfo.UserName),
		slog.String("firstName", botInfo.FirstName),
	)

	return botInfo, nil
}

// GetChatMember –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞
func (t *TelegramFetcher) GetChatMember(chatId, userId int64) (*tgbotapi.ChatMember, error) {
	member, err := t.Provider.GetChatMember(chatId, userId)
	if err != nil {
		slog.Error("Error getting chat member",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
			slog.Int64("userId", userId),
		)
		return nil, err
	}
	return member, nil
}

// SetBotCommands —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (t *TelegramFetcher) SetBotCommands(commands []tgbotapi.BotCommand) error {
	// 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
	err := t.Provider.SetCommands(commands)
	if err != nil {
		slog.Error("Error setting bot commands",
			slog.String("error", err.Error()),
			slog.Int("commandsCount", len(commands)),
		)
		return err
	}

	slog.Info("Bot commands set successfully", slog.Int("count", len(commands)))
	return nil
}

// IsPrivateChat –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
func (t *TelegramFetcher) IsPrivateChat(chatId int64) bool {
	return t.Provider.IsPrivateChat(chatId)
}

// IsGroupChat –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º
func (t *TelegramFetcher) IsGroupChat(chatId int64) bool {
	return t.Provider.IsGroupChat(chatId)
}

// StopBot –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
func (t *TelegramFetcher) StopBot() {
	t.Provider.Stop()
	slog.Info("Bot stopped via TelegramFetcher")
}

// NotifyError –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
func (t *TelegramFetcher) NotifyError(chatId int64, errorMsg string) error {
	fullMsg := "‚ùå " + errorMsg + "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
	return t.SendMessageWithDefaultKeyboard(chatId, fullMsg)
}

// NotifySuccess –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
func (t *TelegramFetcher) NotifySuccess(chatId int64, successMsg string) error {
	fullMsg := "‚úÖ " + successMsg + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	return t.SendMessageWithDefaultKeyboard(chatId, fullMsg)
}

// SendQuoteWithKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (t *TelegramFetcher) SendQuoteWithKeyboard(chatId int64, text, author string) error {
	formattedQuote := FormatQuoteMessage(text, author)
	return t.SendMessageWithDefaultKeyboard(chatId, formattedQuote)
}

// FormatQuoteMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
func FormatQuoteMessage(text, author string) string {
	return "üí¨ \"" + text + "\"\n\n‚Äî " + author
}

// truncateForLog –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func truncateForLog(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "..."
}

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

// SendWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (t *TelegramFetcher) SendWelcomeMessage(chatId int64) error {
	welcomeText := `üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Quote Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:`

	return t.SendMessageWithDefaultKeyboard(chatId, welcomeText)
}

// SendHelpMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (t *TelegramFetcher) SendHelpMessage(chatId int64) error {
	helpText := `‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîπ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üîπ /quote - –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É
üîπ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Ü–∏—Ç–∞—Ç—ã!`

	return t.SendMessageWithDefaultKeyboard(chatId, helpText)
}
