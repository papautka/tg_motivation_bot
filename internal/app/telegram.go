package app

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log/slog"
	"tg_motivation_bot/internal/adapters"
	"tg_motivation_bot/internal/usecases"
)

// startTelegramBotLoop –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func startTelegramBotLoop(
	bot *adapters.TelegramAdapter,
	tgFetcher *usecases.TelegramFetcher,
	quoteFetcher *usecases.QuoteFetcher,
	translateFetcher *usecases.TranslateFetcher,
) {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
	commands := []tgbotapi.BotCommand{
		{Command: "start", Description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
		{Command: "help", Description: "–ü–æ–º–æ—â—å"},
		{Command: "quote", Description: "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É"},
	}

	if err := bot.SetCommands(commands); err != nil {
		slog.Error("Failed to set bot commands", slog.String("error", err.Error()))
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	bot.StartBotLoop(func(command string, chatId int64) {
		handleBotCommand(command, chatId, bot, quoteFetcher, translateFetcher)
	})
}

// handleBotCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func handleBotCommand(
	command string,
	chatId int64,
	bot *adapters.TelegramAdapter,
	quoteFetcher *usecases.QuoteFetcher,
	translateFetcher *usecases.TranslateFetcher,
) {
	slog.Info("Processing command",
		slog.String("command", command),
		slog.Int64("chatId", chatId),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
	if err := bot.SendTypingAction(chatId); err != nil {
		slog.Warn("Failed to send typing action", slog.String("error", err.Error()))
	}

	switch command {
	case "/start":
		handleStartCommand(chatId, bot)
	case "/help":
		handleHelpCommand(chatId, bot)
	case "/quote":
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
		bot.SendMessageWithDefaultInlineKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã:")
	case "ru":
		handleRussianQuote(chatId, bot, quoteFetcher, translateFetcher)
	case "en":
		handleEnglishQuote(chatId, bot, quoteFetcher)
	default:
		handleUnknownCommand(chatId, bot, command)
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func handleStartCommand(chatId int64, bot *adapters.TelegramAdapter) {
	welcomeText := `üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Quote Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:`

	bot.SendMessageWithDefaultInlineKeyboard(chatId, welcomeText)
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func handleHelpCommand(chatId int64, bot *adapters.TelegramAdapter) {
	helpText := `‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîπ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üîπ /quote - –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É
üîπ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Ü–∏—Ç–∞—Ç—ã!`

	bot.SendMessageWithDefaultInlineKeyboard(chatId, helpText)
}

// handleRussianQuote –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
func handleRussianQuote(
	chatId int64,
	bot *adapters.TelegramAdapter,
	quoteFetcher *usecases.QuoteFetcher,
	translateFetcher *usecases.TranslateFetcher,
) {
	// –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ç–∞—Ç—É
	quote, err := quoteFetcher.FetchFormattedQuote()
	if err != nil {
		slog.Error("Failed to fetch quote",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
		)
		bot.SendMessageWithDefaultInlineKeyboard(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
	translated, err := translateFetcher.FetchTranslated(quote, "en", "ru")
	if err != nil {
		slog.Error("Failed to translate quote",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
		)
		bot.SendMessageWithDefaultInlineKeyboard(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ü–∏—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
	formattedQuote := usecases.FormatQuoteWithEmoji(translated.Text, translated.Author)
	bot.SendMessageWithDefaultInlineKeyboard(chatId, formattedQuote)

	slog.Info("Russian quote sent successfully", slog.Int64("chatId", chatId))
}

// handleEnglishQuote –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ü–∏—Ç–∞—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
func handleEnglishQuote(
	chatId int64,
	bot *adapters.TelegramAdapter,
	quoteFetcher *usecases.QuoteFetcher,
) {
	// –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ç–∞—Ç—É
	quote, err := quoteFetcher.FetchFormattedQuote()
	if err != nil {
		slog.Error("Failed to fetch quote",
			slog.String("error", err.Error()),
			slog.Int64("chatId", chatId),
		)
		bot.SendMessageWithDefaultInlineKeyboard(chatId, "‚ùå Error fetching quote. Please try again.")
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
	formattedQuote := usecases.FormatQuoteWithEmoji(quote.Text, quote.Author)
	bot.SendMessageWithDefaultInlineKeyboard(chatId, formattedQuote)

	slog.Info("English quote sent successfully", slog.Int64("chatId", chatId))
}

// handleUnknownCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func handleUnknownCommand(chatId int64, bot *adapters.TelegramAdapter, command string) {
	unknownText := `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ` + command + `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	bot.SendMessageWithDefaultInlineKeyboard(chatId, unknownText)

	slog.Info("Unknown command received",
		slog.String("command", command),
		slog.Int64("chatId", chatId),
	)
}
